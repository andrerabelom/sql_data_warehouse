CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN

    DECLARE @begin_time DATETIME, @end_tiME DATETIME 



	BEGIN TRY
		
		SET @begin_time = GETDATE()

        PRINT '=========================================================='
        PRINT 'Truncating table crm_prd_info'
        TRUNCATE TABLE silver.crm_cust_info;
        PRINT '=========================================================='

        PRINT '=========================================================='
        PRINT 'Inserting into silver.crm_cust_info'
        PRINT '=========================================================='


        INSERT INTO silver.crm_cust_info (
            cst_id,
            cst_key,
            cst_firstname,
            cst_lastname,
            cst_marital_status,
            cst_gndr,
            cst_create_date
        )
        SELECT
            cst_id,
            cst_key,
            TRIM(cst_firstname) AS cst_firstname,
            TRIM(cst_lastname) AS cst_lastname,
            CASE 
                WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
                WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
                ELSE 'N/A'
            END AS cst_marital_status,
            CASE 
                WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
                WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
                ELSE 'N/A'
            END AS cst_gndr,
            cst_create_date
        FROM (
            SELECT *,
                ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_dupl_count
            FROM DataWarehouse.bronze.crm_cust_info
        ) AS sub
        WHERE row_dupl_count = 1;



        PRINT '=========================================================='
        PRINT 'Truncating table crm_prd_info'
        TRUNCATE TABLE silver.crm_prd_info;
        PRINT '=========================================================='


        PRINT '=========================================================='
        PRINT 'Inserting into silver.crm_prd_info'
        PRINT '=========================================================='



        INSERT INTO silver.crm_prd_info (
              prd_id,
              prd_key,
              cat_id,
              prd_nm,
              prd_cost,
              prd_line,
              prd_start_dt,
              prd_end_dt
        )
        SELECT
            prd_id,
            REPLACE(LEFT(prd_key, 5), '-', '_') AS cat_id,
	    SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,        -- Extract product key
            prd_nm,
            ISNULL(prd_cost, 0) AS prd_cost,
            UPPER(TRIM(prd_line)) AS prd_line,
            prd_start_dt,
            prd_end_dt
        FROM DataWarehouse.bronze.crm_prd_info



        PRINT '=========================================================='
        PRINT 'Truncating table crm_sales_details'
        TRUNCATE TABLE silver.crm_sales_details;
        PRINT '=========================================================='

        PRINT '=========================================================='
        PRINT 'Inserting into silver.crm_sales_details'
        PRINT '=========================================================='



        INSERT INTO silver.crm_sales_details (
              sls_ord_num,
              sls_prd_key,
              sls_cust_id,
              sls_order_dt,
              sls_ship_dt,
              sls_due_dt,
              sls_sales,
              sls_quantity,
              sls_price
        )
        SELECT
            sls_ord_num,
            sls_prd_key,
            sls_cust_id,
    
            TRY_CONVERT(DATE, CAST(sls_order_dt AS CHAR(8)), 112) AS sls_order_dt,
            TRY_CONVERT(DATE, CAST(sls_ship_dt AS CHAR(8)), 112) AS sls_ship_dt,
            TRY_CONVERT(DATE, CAST(sls_due_dt AS CHAR(8)), 112) AS sls_due_dt,

            -- Etapa 1: sls_price sempre positivo, e recalculado caso nulo ou zero
            CASE 
                WHEN sls_price IS NULL OR sls_price = 0 THEN 
                    CASE 
                        WHEN sls_quantity IS NOT NULL AND sls_quantity <> 0 THEN sls_sales / NULLIF(sls_quantity,0)
                        ELSE 0
                    END
                ELSE ABS(sls_price)
            END AS sls_price,

            sls_quantity,

            -- Etapa 2: sls_sales recalculado se nulo, zero ou negativo
            CASE 
                WHEN sls_sales IS NULL OR sls_sales <= 0 THEN 
                    CASE 
                        WHEN sls_price IS NULL OR sls_price = 0 THEN 0
                        ELSE ABS(sls_price) * sls_quantity
                    END
                ELSE sls_sales
            END AS sls_sales

        FROM DataWarehouse.bronze.crm_sales_details


        PRINT '=========================================================='
        PRINT 'Truncating table erp_cust_az12'
        TRUNCATE TABLE silver.erp_cust_az12;
        PRINT '=========================================================='


        PRINT '=========================================================='
        PRINT 'Inserting into silver.erp_cust_az12'
        PRINT '=========================================================='



        INSERT INTO silver.erp_cust_az12 (
              [cid],
              [bdate],
              [gen]
        )
        SELECT
            CASE 
                WHEN LEFT(cid, 3) = 'NAS' THEN UPPER(TRIM(SUBSTRING(cid, 4, LEN(cid))))  -- remove "NAS"
                ELSE UPPER(TRIM(cid))                                                   -- sÃ³ aplica TRIM e UPPER
            END AS cid_cleaned,
            bdate,
            gen
        FROM DataWarehouse.bronze.erp_cust_az12




        PRINT '=========================================================='
        PRINT 'Truncating table erp_loc_a101'
        TRUNCATE TABLE silver.erp_loc_a101;
        PRINT '=========================================================='

        PRINT '=========================================================='
        PRINT 'Inserting into silver.erp_loc_a101'
        PRINT '=========================================================='



        INSERT INTO silver.erp_loc_a101 (
              [cid],
              [cntry]
        )
        SELECT
            REPLACE([cid], '-', '') AS cid,
            CASE 
                WHEN TRIM(UPPER([cntry])) = 'USA' THEN 'UNITED STATES'
                WHEN TRIM(UPPER([cntry])) = 'US' THEN 'UNITED STATES'
                WHEN TRIM(UPPER([cntry])) = 'DE' THEN 'GERMANY'
                WHEN [cntry] IS NULL OR TRIM([cntry]) = '' THEN 'N/A'
                ELSE TRIM(UPPER([cntry]))
            END AS cntry
        FROM DataWarehouse.bronze.erp_loc_a101





        PRINT '=========================================================='
        PRINT 'Truncating table erp_px_cat_g1v2'
        TRUNCATE TABLE silver.erp_px_cat_g1v2;
        PRINT '=========================================================='

        PRINT '=========================================================='
        PRINT 'Inserting into silver.erp_px_cat_g1v2'
        PRINT '=========================================================='



        INSERT INTO silver.erp_px_cat_g1v2 (
              [id],
              [cat],
              [subcat],
              [maintenance]
        )
        SELECT
              [id],
              TRIM([cat]) AS [cat],
              TRIM([subcat]) AS [subcat],
              TRIM([maintenance]) AS [maintenance]
        FROM DataWarehouse.bronze.erp_px_cat_g1v2


        SET @end_time = GETDATE()

      END TRY

      BEGIN CATCH
		PRINT '==================================================================='
		PRINT 'Error Ocurred On The Execution'
		PRINT 'Error:' + ERROR_MESSAGE()
		PRINT '==================================================================='
      END CATCH


      PRINT '==================================================================='
	  PRINT 'Everything Worked Just Fine'
	  PRINT 'It took ' + CAST(DATEDIFF(second, @begin_time, @end_time) AS NVARCHAR) + ' seconds to load the Silver Layer.'
	  PRINT '==================================================================='



END
